using System;
using System.Collections;
using System.IO;
using System.Linq;
using System.Text;
using Impostor.Api.Games;
using Boot.Codes.Handlers;
using Boot.Codes.Properties;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Reflection.Metadata;
using System.Reflection.PortableExecutable;
using System.Security.Claims;
using System.Threading;
using Impostor.Api.Events.Managers;
using Microsoft.Extensions.Logging;

namespace Boot.Codes
{
    public class GameCodeManager : IGameCodeManager
    {
        private readonly List<GameCode> _codes;

        private readonly HashSet<GameCode> _inUse;

        private readonly object _sync = new object();

        private readonly ILogger<IGameCodeManager> _logger;

        private readonly IGameCodeFactory _codeFactory;

        public string Path => System.IO.Path.GetFullPath("Boot.Codes");

        public int SixCharCodes { get; }

        public int FourCharCodes { get; }

        public GameCodeManager(ILogger<GameCodeManager> logger, IGameCodeFactory codeFactory, IEventManager eventManager)
        {
            this._logger = logger;
            this._codeFactory = codeFactory;
            logger.LogInformation("Boot.Codes: Reading files from {Path}", Path);

            var validCodes = Read().Select(code => new GameCode(code)).Where(code => !code.IsInvalid).AsParallel().ToList().Shuffle();

            if (validCodes.Count == 0) return;

            this.FourCharCodes = validCodes.Count(code => code.Code.Length == 4);
            this.SixCharCodes = validCodes.Count(code => code.Code.Length == 6);
            var total = SixCharCodes + FourCharCodes;
            _logger.LogInformation("Boot.Codes: {total} codes total.", total);

            this._codes = validCodes;
            this._inUse = new HashSet<GameCode>();


            eventManager.RegisterListener(new GameEventListener(this));
        }

        private IEnumerable<string> Read()
        {
            var dirInfo = new DirectoryInfo(Path);

            if (!dirInfo.Exists)
            {
                dirInfo.Create();
                goto fail;
            }

            var comment = new[] { "--" };
            var words = new HashSet<string>();

            const StringSplitOptions splitOptions = StringSplitOptions.None;
            var startTime = DateTime.Now;
            
            foreach (var file in dirInfo.GetFiles())
            {
                _logger.LogInformation("Boot.Codes: reading \"{Name}\"", file.Name);

                var query = (File.ReadLines(file.FullName, Encoding.UTF8)
                    .Where(line => !string.IsNullOrWhiteSpace(line) && !line.TrimStart().StartsWith(comment[0]))
                    .Select(record => record.Trim().Split(comment, 2, splitOptions)[0].ToUpper().TrimEnd()))
                    .Where(c => !words.Contains(c)).AsParallel();

                foreach (var result in query) words.Add(result);
            }

            if (words.Count == 0) goto fail;

            // HashSet for fast lookup.
            var invalid = words.Where(word => word.Length != 6 && word.Length != 4).ToHashSet();
            var valid = words.Where(word => !invalid.Contains(word));

            var invalids = 0;
            foreach (var line in invalid)
            {
                if (invalids++ < 5) _logger.LogWarning("Boot.Codes: The code \"{line}\" is invalid!", line);
                if (invalids == 6) _logger.LogWarning("Boot.Codes: Found more invalid codes, please check your input files and clean them up");
            }
            
            _logger.LogInformation("Boot.Codes: Finished loading files in {Seconds} seconds, with {invalids} invalid codes.", (DateTime.Now - startTime).Seconds, invalids);

            // force GC because there are a lot of useless thing waiting in LOH and G2

            return valid;

            fail:
            {
                _logger.LogWarning("Boot.Codes: No word list found.");
                return Enumerable.Empty<string>();
            }

        }

        public GameCode Get()
        {
            lock (_sync)
            {
                if (_codes.Count == 0)
                {
                    _logger.LogWarning("Boot.Codes: Ran out of codes!");
                    return _codeFactory.Create();
                }

                var index = StrongRandom.Next(0, _codes.Count);
                var code = _codes[index];

                _codes.RemoveAt(index);
                _inUse.Add(code);

                return code;
            }
        }

        public void Release(GameCode code)
        {
            lock (_sync)
            {
                if (!_inUse.Contains(code)) return; // generated by the factory
                _inUse.Remove(code);
                _codes.Add(code);
            }
        }
    }
}
